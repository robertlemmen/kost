#!/bin/bash

set -e

git_hash=$(git log -1 --pretty=format:g%h)
git_dirty=$(git describe --all --long --dirty | grep -q dirty && echo ' (dirty)' || true)
git_tag=$(git describe --exact-match 2>/dev/null || true)
version_string="${git_tag:-$git_hash}$git_dirty"

echo "KOST $version_string"
echo -n "Time now is "; date --iso-8601=seconds

echo "Cleaning up..."
rm -rf state
mkdir state

# XXX we could have a cmdline to skip this and just re-run the inferring etc
echo "Stage 1: Running input gatherers..."
find input.d -type f | sort | sed -e 's/^input.d\///' | while read file; do
    echo "  $file"
    if [[ -x "input.d/$file" ]]; then
        # XXX would be nice to redirect stderr to stdout, but not to the facts
        # file
        input.d/$file >> state/1-facts.tmp
    else
        cat input.d/$file >> state/1-facts.tmp
    fi
done

# sort them because prolog seems to like that...
cat state/1-facts.tmp | sort > state/1-facts
rm state/1-facts.tmp

num_lines=`wc -l state/1-facts | cut -f 1 -d ' '`
echo "Collected $num_lines lines of input facts"

echo "Stage 2: Generic inferring..."
swipl -s generic-infer > state/2-inferred

# stage 3: specific inferring
# XXX skip this for now to shorten the pipeline and get to the render stage...

# stage 4: render
# XXX for now let's assume I know how to get stage 2+3 working, and I have
# created some output in HUTN:
cat << EOF > state/3-transformed
# test234
SubSystem qt {
    Label: "Qualitrain Backend"
    Service qualitrain-user-service {
        Label: "qualitrain-user-service"

        Interface if1 {
            Type: "REST"
            Label: "/v1/member"
        }
    }

    Service qualitrain-api-service {
        Label: "qualitrain-api-service"

        InterfaceConsumption {
            Target: qt::qualitrain-user-service::if1
        }
    }
}
EOF

echo "Stage 4: Rendering..."
render/render state/3-transformed > state/4-graphviz.dot
neato -T png state/4-graphviz.dot > output.png

echo "Your results are in 'output.png'"
